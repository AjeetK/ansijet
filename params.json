{"name":"Ansibot","tagline":"Ansible playbook automation server","body":"# Ansijet\r\n\r\n_(formerly known as Ansibot, now renamed to avoid being confused with Github's Ansibot)_\r\n\r\n[![Build Status](https://secure.travis-ci.org/hiddentao/ansijet.png)](http://travis-ci.org/hiddentao/ansijet)\r\n\r\nAn [Ansible](http://ansible.com/) playbook automation server.\r\n\r\nA node.js server which exposes a simple web API which triggers playbook runs \r\nwhen a request is received. This is especially useful if you are unable to run \r\nAnsible playbooks directly from within your continuous integration environment \r\nor if you simply wish to trigger playbook runs based on other \r\nevents within your system.\r\n\r\nFeatures:\r\n * Trigger playbook runs from [different sources](#triggers), including from Continous Integration systems such as [Shippable](https://www.shippable.com).\r\n * Runs multile playbooks simultaneously, all in separate shell processes\r\n * Fast, friendly web interface with accompanying [REST API](#rest-api)\r\n * Highly asynchronous, scalable back-end\r\n * Full console [log capture](#execution-logs) and storage\r\n \r\n\r\n\r\n## Installation and startup\r\n\r\n**Pre-requisite: Ansible 1.5+**\r\n\r\nInstallation instructions: http://docs.ansible.com/intro_installation.html.\r\n\r\nTo ensure you have the latest version it is recommended that you install it \r\nusing `pip`, the Python package manager.\r\n\r\n**Pre-requisite: Node.js 0.11.2+**\r\n\r\nInstallation instructions: [http://nodejs.org/](http://nodejs.org/). \r\n\r\nEnsure the installed version is at least **0.11.2**. Ansijet will not work with \r\nearlier versions.\r\n\r\n_(For Ubuntu users I recommend the [Chris Lea PPA](https://launchpad.net/~chris-lea/+archive/node.js/))_.\r\n\r\n**Pre-requisite: MongoDB**\r\n\r\nInstallation instructions: \r\n\r\nAnsible stores its data in MongoDB. The default configuration expects to be able \r\nto connect to a MongoDB server running on `127.0.0.1` (i.e. `localhost`).\r\n\r\n**Setup your Ansible playbooks**\r\n\r\nPlace your Ansible playbooks somewhere, e.g. `/playbooks`.\r\n\r\nAnsijet expects your playbooks folder to have a certain structure:\r\n\r\n```\r\n<playbooks folder>/*.yml   <- your playbooks\r\n<playbooks folder>/hosts   <- Ansible hosts file\r\n```\r\n\r\nEnsure that any [`roles`](http://docs.ansible.com/playbooks_roles.html) needed \r\nby your playbooks can be found by the \r\n`ansible-playbook` binary. An easy way to ensure this is to store your roles \r\nwithin the same folder, i.e. at `<playbooks folder>/roles/`. Ditto for \r\n`group_vars` and `host_vars` folders.\r\n\r\n\r\n**Setup Ansijet**\r\n\r\n```bash\r\n$ git clone https://github.com/hiddentao/ansijet.git ansijet\r\n$ cd ansijet\r\n$ npm install -g gulp bower\r\n$ npm install\r\n$ bower install\r\n$ npm run build\r\n```\r\n\r\nNow create `ansijet/src/config/production.js`:\r\n\r\n```javascript\r\nmodule.exports = function(config) {\r\n  /** Path to folder containg Ansible playbooks */\r\n  config.ansiblePlaybooks = '/playbooks'\r\n\r\n  /** Max no. of jobs to execute in parallel. Should match no. of CPU cores. */\r\n  config.jobsInParallel = 1;\r\n};\r\n```\r\n\r\nIf you look inside `ansijet/src/config/base.js` you will see other \r\nconfiguration settings MongoDB, logging, etc. You may \r\noverride these too within the `config/production.js` you created.\r\n\r\n**Run Ansijet**\r\n\r\n```bash\r\n$ cd ansijet\r\n$ NODE_ENV=production ./start-app.js\r\n```\r\n\r\nIf you visit `http://localhost:3000` you should see the dashboard showing the \r\n_Active Jobs_ (there should be none currently).\r\n\r\n\r\n## Setup playbook automation\r\n\r\nOnce Ansijet is up and running and you can access the web interface you can view \r\nthe list of Playbooks that Ansijet has found and assign triggers to them.\r\n\r\n### Triggers\r\n\r\nA trigger is a mechanism which kicks of a playook run when an incoming URL \r\nrequest is received. \r\n\r\nTriggers have two purposes:\r\n\r\n 1. To perform any necessary additional checks when a request is received to \r\n ensure that the request is valid\r\n 2. To supply variables to the Ansible playbook, allowing for playbook execution \r\n to be configurable based on the incoming request and the trigger configuration.\r\n\r\nAll triggers URLs look like `/invoke/<trigger id>?token=<secret token>` with \r\nadditional query parameters depending on the trigger type.\r\n\r\n_Note: The `<secret token>` is randomly generated by Ansijet when a trigger is created \r\nand acts as an additional security check. If the token in an incoming request is \r\nincorrect Ansijet does not report this to the URL requester - it simply logs \r\nthis fact in the back-end._\r\n\r\nAt present two trigger types are supported:\r\n\r\n**Trigger: Simple**\r\n\r\nThis exposes a simple URL which triggers a playbook run. It does not \r\nperform any checks prior to triggering the playbook run. Neither does it supply \r\nany Ansible playbook variables.\r\n\r\n**Trigger: Shippable**\r\n\r\nThis exposes a URL to be called after a successful [shippable.com](shippable.com) \r\nCI build. It can be configured with a Shippable project id and a Git branch \r\nto execute playbook runs for. It supplies the following Ansible variables:\r\n\r\n  * `shippable_project_id`        <- configured by user\r\n  * `shippable_expected_branch`   <- configured by user\r\n  * `shippable_build_num`         <- obtained from incoming request\r\n  * `shippable_build_branch`      <- obtained from incoming request\r\n\r\n_(Future improvement: once [Shippable build artefacts](https://github.com/hiddentao/ansijet/issues/2) \r\nare publicly accessible Ansijet will be able to supply the build artefacts URL \r\nto playbooks)._\r\n\r\n\r\n### Jobs\r\n\r\nWhen a trigger is invoked it runs a playbook, known as a _Job_. Jobs are \r\nexecuted in parallel by \r\nAnsijet, with the maximum no. of simultaenous jobs determined by the \r\n`jobsInParallel` configuration parameter set during Ansijet installation. \r\nAnsijet is also smart enough to ensure that for each playbook, only one instance \r\nof it is being run at a time.\r\n\r\nEach job - i.e. playbook run - takes place in a separate shell process, allowing \r\nAnsijet to be scaled up according to your machine's cores. Ansijet also \r\nmonitors each shell process such that if no output is received for 5 minutes \r\n(this time window is configurable) it will kill the shell process \r\nand assume the playbook run has failed.\r\n\r\nWhen a job is being processed it shows up as an _Active Job_ on your Ansijet \r\nserver's homepage. You can click on it to view the current log output, including \r\nconsole log output.\r\n\r\n\r\n### Execution logs\r\n\r\nAll logs can be viewed by going to the _Logs_ site section. You can then drill \r\ndown to view the logs pertaining to a particular trigger and/or a particular \r\ntrigger job.\r\n\r\n\r\n\r\n## REST API\r\n\r\nAnsijet is built using [Waigo](http://waigojs.com), which means that all the \r\nURL routes automatically have REST API counterparts. For any given URL, you can \r\nview REST JSON output by simply appending a `format=json` query parameter when \r\nmaking the request. This applies to form submissions too. For more information \r\non this [see the Waigo docs](http://waigojs.com/guide.html#views-and-output-formats).\r\n\r\n\r\n\r\n## Securing Ansijet\r\n\r\nAnsijet does not come with any sort of authentication out of the box. Since it's \r\nrunning playbooks which most probably affect your servers you will likely want to \r\nprotect access to it.\r\n\r\nMy setup is to have Ansijet placed behind an Nginx front-end \r\nserver, with SSL and HTTP Basic auth enforced on all incoming requests:\r\n\r\n```\r\nserver {\r\n  listen 80;\r\n  server_name example.com www.example.com;\r\n  return 301 https://$host$request_uri;\r\n}\r\n\r\nserver {\r\n  listen 443;\r\n  server_name example.com www.example.com;\r\n\r\n  ssl on;\r\n  ssl_certificate /etc/ssl/certs/server.crt;\r\n  ssl_certificate_key /etc/ssl/private/server.key;\r\n  ssl_session_timeout 5m;\r\n\r\n  # Perfect Forward Secrecy\r\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n  ssl_prefer_server_ciphers on;\r\n  ssl_ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+RC4:EDH+aRSA:EECDH:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS;\r\n\r\n  root /ansijet/frontend/build;\r\n\r\n  location ~ /\\. {\r\n    deny all;\r\n  }\r\n\r\n  location ~* ^/(css|fonts|img|js)/.+$ {\r\n    gzip_static on;\r\n    gzip_vary on;\r\n    expires 30d;\r\n    add_header Pragma public;\r\n    add_header Cache-Control \"public\";\r\n  }\r\n\r\n  location ~* ^(robots|humans)\\.txt$ {\r\n    expires 30d;\r\n    add_header Pragma public;\r\n    add_header Cache-Control \"public\";\r\n  }\r\n\r\n  # If you want to monitor the status of Ansijet and check that it is running \r\n  # you can call the `/ping` URL. This will output `Ansijet up` is Ansijet is \r\n  # running\r\n  location = /ping {\r\n    proxy_pass http://127.0.0.1:3000;\r\n  }\r\n\r\n  # Everything else needs auth\r\n  location / {\r\n    auth_basic on;\r\n    auth_basic_user_file /ansijet/httpd.auth;\r\n    proxy_pass http://127.0.0.1:3000;\r\n  }\r\n\r\n}\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nThough I am already using Ansijet in a production environment it is very much a \r\nwork-in-progress. All suggestions and pull requests are welcome! \r\n\r\nSee CONTRIBUTING.md for guidelines.\r\n\r\n## License\r\n\r\nMIT - see LICENSE.md\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}